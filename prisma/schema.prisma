// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  name                   String
  password               String
  role                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  UsersOnTeams           UsersOnTeams[]
  questions              Question[]
  Team                   Team[]
  Lesson                 Lesson[]
  profile                Profile?
  teamRank               TeamRankMember[]
  UserHistoryLessons     UserHistoryLessons[]
  UserPerformanceHistory UserPerformanceHistory[]
}

model UserPerformanceHistory {
  id         Int      @id @default(autoincrement())
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  hit        Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserHistoryLessons {
  id        Int             @id @default(autoincrement())
  done      Boolean
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  lesson    Lesson          @relation(fields: [lessonId], references: [id])
  lessonId  Int
  answers   HistoryAnswer[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([userId, lessonId])
}

model HistoryAnswer {
  id                  Int                @id @default(autoincrement())
  isCorrect           Boolean
  alternative         Alternative        @relation(fields: [alternativeId], references: [id])
  alternativeId       Int
  question            Question           @relation(fields: [questionId], references: [id])
  questionId          Int
  userHistoryLesson   UserHistoryLessons @relation(fields: [userHistoryLessonId], references: [id])
  userHistoryLessonId Int
}

model Profile {
  id           Int      @id @default(autoincrement())
  phone        String
  organization String
  state        String
  city         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
}

model Team {
  id                     Int                      @id @default(autoincrement())
  name                   String
  owner                  User                     @relation(fields: [ownerId], references: [id])
  ownerId                Int
  UsersOnTeams           UsersOnTeams[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Lesson                 Lesson[]
  InvitationCode         InvitationCode?
  TeamRank               TeamRank?
  UserPerformanceHistory UserPerformanceHistory[]
}

model TeamRank {
  id             Int              @id @default(autoincrement())
  team           Team             @relation(fields: [teamId], references: [id])
  teamId         Int              @unique
  teamRankMember TeamRankMember[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model TeamRankMember {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  score      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  TeamRank   TeamRank? @relation(fields: [teamRankId], references: [id])
  teamRankId Int?

  @@unique([userId, teamRankId])
}

model InvitationCode {
  code      String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int      @unique
}

model UsersOnTeams {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int // relation scalar field (used in the `@relation` attribute above)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, teamId])
}

model Question {
  id                     Int                      @id @default(autoincrement())
  title                  String
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  alternatives           Alternative[]
  pontuation             Int
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  topicId                Int
  topic                  Topic                    @relation(fields: [topicId], references: [id])
  QuestionsOnLessons     QuestionsOnLessons[]
  HistoryAnswer          HistoryAnswer[]
  UserPerformanceHistory UserPerformanceHistory[]
}

model QuestionsOnLessons {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([questionId, lessonId])
}

model Alternative {
  id            Int             @id @default(autoincrement())
  title         String
  isCorrect     Boolean         @default(false)
  question      Question?       @relation(fields: [questionId], references: [id])
  questionId    Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  HistoryAnswer HistoryAnswer[]
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]
}

model Lesson {
  id                     Int                      @id @default(autoincrement())
  owner                  User                     @relation(fields: [ownerId], references: [id])
  ownerId                Int
  name                   String
  team                   Team                     @relation(fields: [teamId], references: [id])
  teamId                 Int
  difficulty             Difficulty               @relation(fields: [difficultyId], references: [id])
  difficultyId           Int
  isOpened               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  QuestionsOnLessons     QuestionsOnLessons[]
  ExpirationDate         ExpirationDate[]
  UserHistoryLessons     UserHistoryLessons[]
  UserPerformanceHistory UserPerformanceHistory[]
}

model Difficulty {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int
  Lesson    Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExpirationDate {
  id        Int      @id @default(autoincrement())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id          Int      @id @default(autoincrement())
  status      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
