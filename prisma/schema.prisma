// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  role         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UsersOnTeams UsersOnTeams[]
  questions    Question[]
  Team         Team[]
  Lesson       Lesson[]
}

model Team {
  id           Int            @id @default(autoincrement())
  name         String
  owner        User           @relation(fields: [ownerId], references: [id])
  ownerId      Int
  UsersOnTeams UsersOnTeams[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Lesson       Lesson[]
}

model UsersOnTeams {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int // relation scalar field (used in the `@relation` attribute above)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, teamId])
}

model Question {
  id                 Int                  @id @default(autoincrement())
  title              String
  user               User                 @relation(fields: [userId], references: [id])
  userId             Int
  alternatives       Alternative[]
  pontuation         Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  topicId            Int
  topic              Topic                @relation(fields: [topicId], references: [id])
  QuestionImage      QuestionImage[]
  QuestionsOnLessons QuestionsOnLessons[]
}

model QuestionsOnLessons {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([questionId, lessonId])
}

model QuestionImage {
  id         Int       @id @default(autoincrement())
  name       String
  path       String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Alternative {
  id         Int       @id @default(autoincrement())
  title      String
  isCorrect  Boolean   @default(false)
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]
}

model Lesson {
  id                 Int                  @id @default(autoincrement())
  owner              User                 @relation(fields: [ownerId], references: [id])
  ownerId            Int
  name               String
  team               Team                 @relation(fields: [teamId], references: [id])
  teamId             Int
  difficulty         Difficulty           @relation(fields: [difficultyId], references: [id])
  difficultyId       Int
  isOpened           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  QuestionsOnLessons QuestionsOnLessons[]
}

model Difficulty {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int
  Lesson    Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
